"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
"""
import re
from typing import List, Optional
from datetime import datetime


def format_price(price: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã"""
    return f"{price:.2f} —Ä—É–±."


def format_datetime(dt: datetime) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""
    return dt.strftime("%d.%m.%Y %H:%M")


def validate_phone(phone: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    phone_pattern = r'^(\+7|7|8)?[\s\-]?\(?[489][0-9]{2}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$'
    return bool(re.match(phone_pattern, phone))


def clean_phone(phone: str) -> str:
    """–û—á–∏—Å—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    clean = re.sub(r'[^\d]', '', phone)
    if clean.startswith('8'):
        clean = '7' + clean[1:]
    elif clean.startswith('9'):
        clean = '7' + clean
    return clean


def paginate_list(items: List, page: int, per_page: int = 10) -> tuple:
    """–ü–∞–≥–∏–Ω–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞"""
    total_items = len(items)
    total_pages = (total_items + per_page - 1) // per_page

    start_idx = (page - 1) * per_page
    end_idx = start_idx + per_page

    return items[start_idx:end_idx], total_pages


def escape_html(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML —Å–∏–º–≤–æ–ª–æ–≤"""
    return (text.replace('&', '&amp;')
                .replace('<', '&lt;')
                .replace('>', '&gt;'))


def truncate_text(text: str, max_length: int = 100) -> str:
    """–û–±—Ä–µ–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –º–Ω–æ–≥–æ—Ç–æ—á–∏–µ–º"""
    if len(text) <= max_length:
        return text
    return text[:max_length - 3] + '...'


def extract_user_id_from_command(text: str) -> Optional[int]:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ user_id –∏–∑ –∫–æ–º–∞–Ω–¥—ã —Ç–∏–ø–∞ /user_123"""
    match = re.search(r'_(\d+)$', text)
    return int(match.group(1)) if match else None


def format_order_status(status: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    status_map = {
        'pending': 'üÜï –ù–æ–≤—ã–π',
        'processing': 'üîÑ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
        'preparing': 'üë®‚Äçüç≥ –ì–æ—Ç–æ–≤–∏—Ç—Å—è',
        'delivering': 'üöó –î–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è',
        'completed': '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω',
        'cancelled': '‚ùå –û—Ç–º–µ–Ω–µ–Ω'
    }
    return status_map.get(status, status)