"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏
"""
from aiogram import Router, F, types

from src.config import ADMIN_IDS
from src.keyboards.admin import admin_kb
from src.services import OrderService
from src.bot.dependencies import get_db_session

router = Router()


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return user_id in ADMIN_IDS


@router.callback_query(F.data == "admin_orders")
async def orders_menu_handler(callback: types.CallbackQuery):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    await callback.message.edit_text(
        "üìã <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=admin_kb.orders_menu()
    )


@router.callback_query(F.data.startswith("orders_"))
async def orders_list_handler(callback: types.CallbackQuery):
    """–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å—É"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    status = callback.data.split("_")[1]

    status_map = {
        "new": "pending",
        "processing": "processing",
        "completed": "completed",
        "cancelled": "cancelled"
    }

    status_text = {
        "new": "üÜï –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã",
        "processing": "üîÑ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ",
        "completed": "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ",
        "cancelled": "‚ùå –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ"
    }

    session = get_db_session()
    try:
        order_service = OrderService(session)
        orders = order_service.get_orders_by_status(status_map.get(status, "pending"))

        if not orders:
            await callback.message.edit_text(
                f"{status_text[status]}\n\n"
                "–ó–∞–∫–∞–∑–æ–≤ —Å —Ç–∞–∫–∏–º —Å—Ç–∞—Ç—É—Å–æ–º –Ω–µ—Ç.",
                reply_markup=admin_kb.orders_menu()
            )
            return

        text = f"{status_text[status]}:\n\n"

        for order in orders[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
            text += f"üÜî –ó–∞–∫–∞–∑ #{order.id}\n"
            text += f"üë§ {order.username or '–ë–µ–∑ –∏–º–µ–Ω–∏'}\n"
            text += f"üì± {order.phone or '–ù–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞'}\n"
            text += f"üí∞ {order.total_price} —Ä—É–±.\n"
            text += f"üïê {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            text += f"/order_{order.id}\n\n"

        await callback.message.edit_text(
            text,
            reply_markup=admin_kb.orders_menu()
        )
    finally:
        session.close()


@router.message(F.text.regexp(r'^/order_(\d+)$'))
async def order_detail_handler(message: types.Message):
    """–î–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
    if not is_admin(message.from_user.id):
        return

    order_id = int(message.text.split('_')[1])

    session = get_db_session()
    try:
        order_service = OrderService(session)
        order_details = order_service.get_order_details(order_id)

        if not order_details:
            await message.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        order = order_details['order']
        items = order_details['items']

        text = (
            f"üìã <b>–ó–∞–∫–∞–∑ #{order.id}</b>\n\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {order.username or '–ë–µ–∑ –∏–º–µ–Ω–∏'}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {order.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üìç –ê–¥—Ä–µ—Å: {order.address or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üïê –í—Ä–µ–º—è: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {order.status}\n\n"
            f"<b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>\n"
        )

        for item in items:
            text += (
                f"‚Ä¢ {item['product'].name} x{item['quantity']} "
                f"= {item['total']} —Ä—É–±.\n"
            )

        text += f"\nüí∞ <b>–ò—Ç–æ–≥–æ: {order.total_price} —Ä—É–±.</b>"

        await message.answer(
            text,
            reply_markup=admin_kb.order_actions(order_id)
        )
    finally:
        session.close()


@router.callback_query(F.data.startswith("order_"))
async def order_action_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–∫–∞–∑–∞–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    action, order_id = callback.data.split(":")
    order_id = int(order_id)

    status_map = {
        "order_accept": "processing",
        "order_cancel": "cancelled",
        "order_delivering": "delivering",
        "order_complete": "completed"
    }

    status_text = {
        "order_accept": "–ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É",
        "order_cancel": "–æ—Ç–º–µ–Ω–µ–Ω",
        "order_delivering": "–ø–µ—Ä–µ–¥–∞–Ω –≤ –¥–æ—Å—Ç–∞–≤–∫—É",
        "order_complete": "–∑–∞–≤–µ—Ä—à–µ–Ω"
    }

    new_status = status_map.get(action)
    if not new_status:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
        return

    session = get_db_session()
    try:
        order_service = OrderService(session)
        success = order_service.update_order_status(order_id, new_status)

        if success:
            await callback.answer(
                f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} {status_text[action]}",
                show_alert=True
            )
            await callback.message.edit_reply_markup(
                reply_markup=admin_kb.orders_menu()
            )
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞", show_alert=True)
    finally:
        session.close()