"""
–ì–ª–∞–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
"""
from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from sqlalchemy import func

from src.config import ADMIN_IDS
from src.keyboards.admin import admin_kb
from src.database.models import TelegramUser, Product, Order
from src.bot.dependencies import get_db_session

router = Router()


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return user_id in ADMIN_IDS


@router.message(Command('admin'))
async def admin_main_menu(message: types.Message):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return

    await message.answer(
        "üîß <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=admin_kb.main_menu()
    )


@router.callback_query(F.data == "admin_back")
async def admin_back_handler(callback: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    await callback.message.edit_text(
        "üîß <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=admin_kb.main_menu()
    )


@router.callback_query(F.data == "admin_stats")
async def admin_stats_handler(callback: types.CallbackQuery):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    session = get_db_session()
    try:
        # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        total_users = session.query(func.count(TelegramUser.id)).scalar()
        total_products = session.query(func.count(Product.id)).scalar()
        total_orders = session.query(func.count(Order.id)).scalar()

        # –ü–æ–¥—Å—á–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        pending_orders = session.query(func.count(Order.id)).filter_by(
            status='pending'
        ).scalar()
        completed_orders = session.query(func.count(Order.id)).filter_by(
            status='completed'
        ).scalar()

        # –û–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂
        total_sales = session.query(func.sum(Order.total_price)).filter_by(
            status='completed'
        ).scalar() or 0

        text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_products}\n"
            f"üìã –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}\n\n"
            f"üÜï –ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {pending_orders}\n"
            f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {completed_orders}\n\n"
            f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂: {total_sales:.2f} —Ä—É–±."
        )

        await callback.message.edit_text(
            text,
            reply_markup=admin_kb.main_menu()
        )
    finally:
        session.close()


@router.callback_query(F.data == "cancel")
async def cancel_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=admin_kb.main_menu()
    )


@router.callback_query(F.data == "admin_close")
async def close_admin_handler(callback: types.CallbackQuery):
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    await callback.message.delete()
    await callback.answer("–ü–∞–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∞")