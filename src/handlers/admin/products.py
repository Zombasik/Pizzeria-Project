"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
"""
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from src.config import ADMIN_IDS
from src.keyboards.admin import admin_kb
from src.services import ProductService
from src.bot.dependencies import get_db_session

router = Router()


class ProductStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏"""
    waiting_for_name = State()
    waiting_for_description = State()
    waiting_for_price = State()
    waiting_for_category = State()
    waiting_for_image = State()


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return user_id in ADMIN_IDS


@router.callback_query(F.data == "admin_products")
async def products_menu_handler(callback: types.CallbackQuery):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    await callback.message.edit_text(
        "üì¶ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=admin_kb.products_menu()
    )


@router.callback_query(F.data == "product_list")
async def product_list_handler(callback: types.CallbackQuery):
    """–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    session = get_db_session()
    try:
        product_service = ProductService(session)
        products = product_service.get_all_products()

        if not products:
            await callback.message.edit_text(
                "üì¶ –¢–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.\n"
                "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä!",
                reply_markup=admin_kb.products_menu()
            )
            return

        text = "üì¶ <b>–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:</b>\n\n"

        for product in products:
            status = "‚úÖ" if product.available else "‚ùå"
            text += f"{status} <b>{product.name}</b>\n"
            text += f"   üí∞ {product.price} —Ä—É–±.\n"
            text += f"   üìÇ {product.category or '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}\n"
            text += f"   /product_{product.id}\n\n"

        await callback.message.edit_text(
            text,
            reply_markup=admin_kb.products_menu()
        )
    finally:
        session.close()


@router.callback_query(F.data == "product_add")
async def product_add_handler(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    await state.set_state(ProductStates.waiting_for_name)
    await callback.message.edit_text(
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
        "–®–∞–≥ 1/5: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=admin_kb.cancel()
    )


@router.message(ProductStates.waiting_for_name)
async def product_name_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    await state.update_data(name=message.text)
    await state.set_state(ProductStates.waiting_for_description)

    await message.answer(
        "–®–∞–≥ 2/5: –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=admin_kb.cancel()
    )


@router.message(ProductStates.waiting_for_description)
async def product_description_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    await state.update_data(description=message.text)
    await state.set_state(ProductStates.waiting_for_price)

    await message.answer(
        "–®–∞–≥ 3/5: –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):",
        reply_markup=admin_kb.cancel()
    )


@router.message(ProductStates.waiting_for_price)
async def product_price_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞"""
    try:
        price = float(message.text)
        await state.update_data(price=price)
        await state.set_state(ProductStates.waiting_for_category)

        await message.answer(
            "–®–∞–≥ 4/5: –í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:",
            reply_markup=admin_kb.cancel()
        )
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")


@router.message(ProductStates.waiting_for_category)
async def product_category_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞"""
    await state.update_data(category=message.text)
    await state.set_state(ProductStates.waiting_for_image)

    await message.answer(
        "–®–∞–≥ 5/5: –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
        reply_markup=admin_kb.cancel()
    )


@router.message(ProductStates.waiting_for_image)
async def product_image_handler(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    data = await state.get_data()

    image_path = None
    if message.photo:
        image_path = message.photo[-1].file_id
    elif message.text and message.text.lower() != '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä –≤ –ë–î
    session = get_db_session()
    try:
        product_service = ProductService(session)
        product_data = {
            'name': data['name'],
            'description': data['description'],
            'price': data['price'],
            'category': data['category'],
            'image': image_path,
            'available': True
        }

        product = product_service.create_product(product_data)

        await message.answer(
            f"‚úÖ –¢–æ–≤–∞—Ä '<b>{product.name}</b>' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"üí∞ –¶–µ–Ω–∞: {product.price} —Ä—É–±.\n"
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product.category}",
            reply_markup=admin_kb.products_menu()
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {str(e)}")
    finally:
        session.close()
        await state.clear()


@router.message(F.text.regexp(r'^/product_(\d+)$'))
async def product_detail_handler(message: types.Message):
    """–î–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞"""
    if not is_admin(message.from_user.id):
        return

    product_id = int(message.text.split('_')[1])

    session = get_db_session()
    try:
        product_service = ProductService(session)
        product = product_service.get_product_by_id(product_id)

        if not product:
            await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        status = "‚úÖ –í –Ω–∞–ª–∏—á–∏–∏" if product.available else "‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏"

        text = (
            f"üì¶ <b>{product.name}</b>\n\n"
            f"üìù {product.description}\n"
            f"üí∞ –¶–µ–Ω–∞: {product.price} —Ä—É–±.\n"
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product.category or '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {status}"
        )

        if product.image:
            await message.answer_photo(
                photo=product.image,
                caption=text,
                reply_markup=admin_kb.product_actions(product_id)
            )
        else:
            await message.answer(
                text,
                reply_markup=admin_kb.product_actions(product_id)
            )
    finally:
        session.close()