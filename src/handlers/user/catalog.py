"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º –∏ –∫–æ—Ä–∑–∏–Ω–æ–π
"""
import os
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.types import InputMediaPhoto, FSInputFile

from src.services import ProductService, CartService
from src.keyboards.inline import (
    get_catalog_keyboard, get_cart_keyboard,
    get_main_menu_keyboard
)
from src.bot.dependencies import get_db_session

router = Router()


@router.callback_query(F.data.startswith("catalog_page:"))
async def catalog_navigation(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É"""
    page = int(callback.data.split(":")[1])
    data = await state.get_data()
    products = data.get("products", [])

    if not products or page < 0 or page >= len(products):
        await callback.answer("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å
    await state.update_data(current_index=page, quantity=1)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä
    product = products[page]
    await show_product_edit(callback.message, product, page, products, callback.from_user.id)
    await callback.answer()


@router.callback_query(F.data.startswith("qty_minus:") | F.data.startswith("qty_plus:"))
async def quantity_change(callback: types.CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞"""
    data = await state.get_data()
    current_qty = data.get("quantity", 1)

    if callback.data.startswith("qty_minus:"):
        new_qty = max(1, current_qty - 1)
    else:
        new_qty = min(10, current_qty + 1)

    await state.update_data(quantity=new_qty)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    products = data.get("products", [])
    current_index = data.get("current_index", 0)

    if products and 0 <= current_index < len(products):
        product = products[current_index]
        keyboard = get_catalog_keyboard_with_qty(
            products, current_index, callback.from_user.id, new_qty
        )
        await callback.message.edit_reply_markup(reply_markup=keyboard)

    await callback.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {new_qty}")


@router.callback_query(F.data.startswith("add_to_cart:"))
async def add_to_cart(callback: types.CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    parts = callback.data.split(":")
    product_id = int(parts[1])

    data = await state.get_data()
    quantity = data.get("quantity", 1)

    session = get_db_session()
    try:
        cart_service = CartService(session)
        cart_service.add_to_cart(
            user_id=callback.from_user.id,
            product_id=product_id,
            quantity=quantity
        )

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        await state.update_data(quantity=1)

        await callback.answer(
            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É ({quantity} —à—Ç.)",
            show_alert=True
        )

    finally:
        session.close()


@router.callback_query(F.data == "show_cart")
async def show_cart(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É"""
    session = get_db_session()
    try:
        cart_service = CartService(session)
        cart_items = cart_service.get_user_cart(callback.from_user.id)

        if not cart_items:
            await callback.message.edit_text(
                "üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</b>\n\n"
                "–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞!",
                reply_markup=get_main_menu_keyboard()
            )
        else:
            cart_text = "üõí <b>–í–ê–®–ê –ö–û–†–ó–ò–ù–ê</b>\n"
            cart_text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"

            total_price = 0
            for item in cart_items:
                cart_text += f"‚ñ´Ô∏è {item['product_name']}\n"
                cart_text += f"   {item['quantity']} x {item['product_price']:.0f} = "
                cart_text += f"<b>{item['total']:.0f} —Ä—É–±.</b>\n\n"
                total_price += item['total']

            cart_text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            cart_text += f"üí∞ <b>–ò–¢–û–ì–û: {total_price:.0f} —Ä—É–±.</b>"

            keyboard = get_cart_keyboard(cart_items, total_price)
            await callback.message.edit_text(cart_text, reply_markup=keyboard)

        await callback.answer()

    finally:
        session.close()


@router.callback_query(F.data == "clear_cart")
async def clear_cart(callback: types.CallbackQuery):
    """–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É"""
    session = get_db_session()
    try:
        cart_service = CartService(session)
        cart_service.clear_cart(callback.from_user.id)

        await callback.message.edit_text(
            "üóë <b>–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞!",
            reply_markup=get_main_menu_keyboard()
        )
        await callback.answer("‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞", show_alert=True)

    finally:
        session.close()


@router.callback_query(F.data == "back_to_catalog" | F.data == "show_catalog")
async def back_to_catalog(callback: types.CallbackQuery, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–∞–ª–æ–≥—É"""
    session = get_db_session()
    try:
        product_service = ProductService(session)
        products = product_service.get_all_products(available_only=True)

        if not products:
            await callback.message.edit_text(
                "üçï <b>–ö–∞—Ç–∞–ª–æ–≥ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!",
                reply_markup=get_main_menu_keyboard()
            )
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.update_data(products=products, current_index=0, quantity=1)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä
            product = products[0]
            await show_product_edit(
                callback.message, product, 0, products, callback.from_user.id
            )

        await callback.answer()

    finally:
        session.close()


@router.callback_query(F.data == "main_menu")
async def show_main_menu(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.edit_text(
        "üìã <b>–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=get_main_menu_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "show_contacts")
async def show_contacts(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã"""
    contacts_text = (
        "üìû <b>–ù–ê–®–ò –ö–û–ù–¢–ê–ö–¢–´</b>\n\n"
        "‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω: +7 (999) 123-45-67\n"
        "üìç –ê–¥—Ä–µ—Å: –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 1\n"
        "‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 10:00 - 22:00\n\n"
        "üí¨ –î–ª—è –∑–∞–∫–∞–∑–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏!"
    )

    await callback.message.edit_text(
        contacts_text,
        reply_markup=get_main_menu_keyboard()
    )
    await callback.answer()


async def show_product_edit(message, product, index, products, user_id):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä–∞ —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    caption = f"<b>{product.name}</b>\n\n"

    if product.description:
        caption += f"{product.description}\n\n"

    if product.category:
        caption += f"üìç –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product.category}\n"

    caption += f"üí∞ –¶–µ–Ω–∞: <b>{product.price:.0f} —Ä—É–±.</b>"

    keyboard = get_catalog_keyboard(products, index, user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ
    if product.image and os.path.exists(product.image):
        try:
            photo = FSInputFile(product.image)
            media = InputMediaPhoto(media=photo, caption=caption, parse_mode="HTML")
            await message.edit_media(media=media, reply_markup=keyboard)
        except Exception:
            text = f"üñº <i>–§–æ—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ</i>\n\n{caption}"
            await message.edit_text(text, reply_markup=keyboard)
    else:
        text = f"üñº <i>–§–æ—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</i>\n\n{caption}"
        await message.edit_text(text, reply_markup=keyboard)


def get_catalog_keyboard_with_qty(products, current_index, user_id, quantity):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º"""
    from aiogram.utils.keyboard import InlineKeyboardBuilder

    builder = InlineKeyboardBuilder()
    product = products[current_index]

    # –ö–Ω–æ–ø–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
    builder.row(
        types.InlineKeyboardButton(text="‚ûñ", callback_data=f"qty_minus:{product.id}"),
        types.InlineKeyboardButton(text=f"{quantity} —à—Ç", callback_data="qty_display"),
        types.InlineKeyboardButton(text="‚ûï", callback_data=f"qty_plus:{product.id}")
    )

    # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
    builder.row(
        types.InlineKeyboardButton(
            text="üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É",
            callback_data=f"add_to_cart:{product.id}:{quantity}"
        )
    )

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    nav_buttons = []
    if current_index > 0:
        nav_buttons.append(
            types.InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=f"catalog_page:{current_index - 1}"
            )
        )

    nav_buttons.append(
        types.InlineKeyboardButton(
            text=f"{current_index + 1}/{len(products)}",
            callback_data="page_info"
        )
    )

    if current_index < len(products) - 1:
        nav_buttons.append(
            types.InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
                callback_data=f"catalog_page:{current_index + 1}"
            )
        )

    builder.row(*nav_buttons)

    # –ö–æ—Ä–∑–∏–Ω–∞ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    builder.row(
        types.InlineKeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="show_cart"),
        types.InlineKeyboardButton(text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )

    return builder.as_markup()