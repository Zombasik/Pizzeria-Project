"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º –∏ –∫–æ—Ä–∑–∏–Ω–æ–π
"""
import os
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.types import InputMediaPhoto, FSInputFile

from src.services import ProductService, CartService, OrderService
from src.config import PAYMENT_TOKEN
from src.keyboards.inline import (
    get_catalog_keyboard, get_cart_keyboard,
    get_main_menu_keyboard
)
from src.bot.dependencies import get_db_session

router = Router()


@router.callback_query(F.data.startswith("catalog_page:"))
async def catalog_navigation(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É"""
    page = int(callback.data.split(":")[1])
    data = await state.get_data()
    products = data.get("products", [])

    if not products or page < 0 or page >= len(products):
        await callback.answer("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å
    await state.update_data(current_index=page, quantity=1)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä
    product = products[page]
    await show_product_edit(callback.message, product, page, products, callback.from_user.id)
    await callback.answer()


@router.callback_query(F.data.startswith("qty_minus:") | F.data.startswith("qty_plus:"))
async def quantity_change(callback: types.CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞"""
    data = await state.get_data()
    current_qty = data.get("quantity", 1)

    if callback.data.startswith("qty_minus:"):
        new_qty = max(1, current_qty - 1)
    else:
        new_qty = min(10, current_qty + 1)

    await state.update_data(quantity=new_qty)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    products = data.get("products", [])
    current_index = data.get("current_index", 0)

    if products and 0 <= current_index < len(products):
        product = products[current_index]
        keyboard = get_catalog_keyboard_with_qty(
            products, current_index, callback.from_user.id, new_qty
        )
        await callback.message.edit_reply_markup(reply_markup=keyboard)

    await callback.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {new_qty}")


@router.callback_query(F.data.startswith("add_to_cart:"))
async def add_to_cart(callback: types.CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É"""
    import logging
    logger = logging.getLogger(__name__)

    parts = callback.data.split(":")
    product_id = int(parts[1])

    data = await state.get_data()
    quantity = data.get("quantity", 1)

    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É: user_id={callback.from_user.id}, product_id={product_id}, quantity={quantity}")

    session = get_db_session()
    try:
        cart_service = CartService(session)
        cart_item = cart_service.add_to_cart(
            user_id=callback.from_user.id,
            product_id=product_id,
            quantity=quantity
        )
        logger.info(f"–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É: cart_item_id={cart_item.id}")

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        await state.update_data(quantity=1)

        await callback.answer(
            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É ({quantity} —à—Ç.)",
            show_alert=True
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É: {e}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É", show_alert=True)
    finally:
        session.close()


@router.callback_query(F.data == "show_cart")
async def show_cart(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É"""
    import logging
    logger = logging.getLogger(__name__)

    session = get_db_session()
    try:
        cart_service = CartService(session)
        cart_items = cart_service.get_user_cart(callback.from_user.id)
        logger.info(f"–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {len(cart_items)} —Ç–æ–≤–∞—Ä–æ–≤")

        if not cart_items:
            cart_text = (
                "üõí <b>–ö–û–†–ó–ò–ù–ê</b>\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                "üì≠ –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞\n\n"
                "–ó–∞–≥–ª—è–Ω–∏—Ç–µ –≤ –Ω–∞—à–µ –º–µ–Ω—é –∏ –≤—ã–±–µ—Ä–∏—Ç–µ\n"
                "—á—Ç–æ-—Ç–æ –≤–∫—É—Å–Ω–æ–µ! üçï"
            )
            keyboard = get_main_menu_keyboard()
        else:
            cart_text = "üõí <b>–í–ê–®–ê –ö–û–†–ó–ò–ù–ê</b>\n"
            cart_text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"

            total_price = 0
            for item in cart_items:
                cart_text += f"‚ñ´Ô∏è {item['product_name']}\n"
                cart_text += f"   {item['quantity']} x {item['product_price']:.0f} = "
                cart_text += f"<b>{item['total']:.0f} —Ä—É–±.</b>\n\n"
                total_price += item['total']

            cart_text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            cart_text += f"üí∞ <b>–ò–¢–û–ì–û: {total_price:.0f} —Ä—É–±.</b>"

            keyboard = get_cart_keyboard(cart_items, total_price)

        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ, —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        try:
            await callback.message.edit_text(cart_text, reply_markup=keyboard)
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —ç—Ç–æ –±—ã–ª–æ —Ñ–æ—Ç–æ), —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            await callback.message.delete()
            await callback.message.answer(cart_text, reply_markup=keyboard)

        await callback.answer()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–æ—Ä–∑–∏–Ω—ã: {e}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—Ä–∑–∏–Ω—ã", show_alert=True)
    finally:
        session.close()


@router.callback_query(F.data == "clear_cart")
async def clear_cart(callback: types.CallbackQuery):
    """–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É"""
    session = get_db_session()
    try:
        cart_service = CartService(session)
        cart_service.clear_cart(callback.from_user.id)

        text = (
            "üóë <b>–ö–û–†–ó–ò–ù–ê –û–ß–ò–©–ï–ù–ê</b>\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            "‚úÖ –í—Å–µ —Ç–æ–≤–∞—Ä—ã —É–¥–∞–ª–µ–Ω—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã\n\n"
            "–•–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑?\n"
            "–ó–∞–≥–ª—è–Ω–∏—Ç–µ –≤ –Ω–∞—à–µ –º–µ–Ω—é! üçï"
        )

        try:
            await callback.message.edit_text(text, reply_markup=get_main_menu_keyboard())
        except Exception:
            await callback.message.delete()
            await callback.message.answer(text, reply_markup=get_main_menu_keyboard())

        await callback.answer("‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞", show_alert=True)

    finally:
        session.close()


@router.callback_query((F.data == "back_to_catalog") | (F.data == "show_catalog"))
async def back_to_catalog(callback: types.CallbackQuery, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–∞–ª–æ–≥—É"""
    session = get_db_session()
    try:
        product_service = ProductService(session)
        products = product_service.get_all_products(available_only=True)

        if not products:
            text = "üçï <b>–ö–∞—Ç–∞–ª–æ–≥ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>\n\n" \
                   "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!"
            try:
                await callback.message.edit_text(text, reply_markup=get_main_menu_keyboard())
            except Exception:
                await callback.message.delete()
                await callback.message.answer(text, reply_markup=get_main_menu_keyboard())
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.update_data(products=products, current_index=0, quantity=1)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä
            product = products[0]
            # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ
            await callback.message.delete()
            await show_product_send(
                callback.message, product, 0, products, callback.from_user.id
            )

        await callback.answer()

    finally:
        session.close()


@router.callback_query(F.data == "main_menu")
async def show_main_menu(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    text = "üìã <b>–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ</b>\n\n" \
           "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"

    try:
        await callback.message.edit_text(text, reply_markup=get_main_menu_keyboard())
    except Exception:
        await callback.message.delete()
        await callback.message.answer(text, reply_markup=get_main_menu_keyboard())

    await callback.answer()


@router.callback_query(F.data == "show_contacts")
async def show_contacts(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã"""
    contacts_text = (
        "üìû <b>–ö–û–ù–¢–ê–ö–¢–´ –ò –ò–ù–§–û–†–ú–ê–¶–ò–Ø</b>\n"
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        "üçï <b>–ü–∏—Ü—Ü–µ—Ä–∏—è Pizza Bot</b>\n\n"
        "üìç <b>–ê–¥—Ä–µ—Å:</b>\n"
        "–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 1\n"
        "(—Ä—è–¥–æ–º —Å –º–µ—Ç—Ä–æ ¬´–ü—Ä–∏–º–µ—Ä–Ω–∞—è¬ª)\n\n"
        "üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –∑–∞–∫–∞–∑–æ–≤:</b>\n"
        "+7 (999) 123-45-67\n\n"
        "‚è∞ <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b>\n"
        "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ: 10:00 - 22:00\n"
        "–ë–µ–∑ –≤—ã—Ö–æ–¥–Ω—ã—Ö\n\n"
        "üöö <b>–î–æ—Å—Ç–∞–≤–∫–∞:</b>\n"
        "‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω–æ –æ—Ç 1000 —Ä—É–±.\n"
        "‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: 30-45 –º–∏–Ω—É—Ç\n"
        "‚Ä¢ –ü–æ –≤—Å–µ–π –ú–æ—Å–∫–≤–µ\n\n"
        "üí≥ <b>–û–ø–ª–∞—Ç–∞:</b>\n"
        "–ù–∞–ª–∏—á–Ω—ã–º–∏, –∫–∞—Ä—Ç–æ–π, –æ–Ω–ª–∞–π–Ω\n\n"
        "üí¨ –ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∞—à–µ–º—É –∑–∞–∫–∞–∑—É!"
    )

    try:
        await callback.message.edit_text(contacts_text, reply_markup=get_main_menu_keyboard())
    except Exception:
        await callback.message.delete()
        await callback.message.answer(contacts_text, reply_markup=get_main_menu_keyboard())

    await callback.answer()


@router.callback_query(F.data == "checkout")
async def checkout(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –æ–ø–ª–∞—Ç–æ–π"""
    session = get_db_session()
    try:
        cart_service = CartService(session)
        cart_items = cart_service.get_user_cart(callback.from_user.id)

        if not cart_items:
            await callback.answer("‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!", show_alert=True)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ—Ä–∑–∏–Ω—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await state.update_data(cart_items=cart_items)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ª–∏ –æ–ø–ª–∞—Ç–∞
        if not PAYMENT_TOKEN:
            # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —Å–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –±–µ–∑ –æ–ø–ª–∞—Ç—ã
            await create_order_without_payment(callback, cart_items, session)
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã
            await send_invoice(callback, cart_items)

        await callback.answer()

    finally:
        session.close()


async def create_order_without_payment(callback, cart_items, session):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –±–µ–∑ –æ–ø–ª–∞—Ç—ã"""
    order_service = OrderService(session)

    order_data = {
        'user_id': callback.from_user.id,
        'status': 'pending',
        'phone': None,
        'address': None
    }

    items = [
        {
            'product_id': item['product_id'],
            'quantity': item['quantity'],
            'price': item['product_price']
        }
        for item in cart_items
    ]

    order = order_service.create_order(order_data, items)

    # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
    cart_service = CartService(session)
    cart_service.clear_cart(callback.from_user.id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫–∞–∑–µ
    total_price = sum(item['total'] for item in cart_items)
    order_text = f"‚úÖ <b>–ó–ê–ö–ê–ó –û–§–û–†–ú–õ–ï–ù!</b>\n"
    order_text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    order_text += f"üì¶ <b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #{order.id}</b>\n\n"
    order_text += "<b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>\n"

    for item in cart_items:
        order_text += f"‚Ä¢ {item['product_name']}\n"
        order_text += f"  {item['quantity']} —à—Ç. √ó {item['product_price']:.0f} = "
        order_text += f"<b>{item['total']:.0f} —Ä—É–±.</b>\n\n"

    order_text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    order_text += f"üí∞ <b>–ò–¢–û–ì–û: {total_price:.0f} —Ä—É–±.</b>\n\n"
    order_text += "üìû –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏\n"
    order_text += "–¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç\n\n"
    order_text += "‚è∞ <b>–°—Ç–∞—Ç—É—Å:</b> –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
    order_text += "üöö <b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> 30-45 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"

    try:
        await callback.message.edit_text(order_text, reply_markup=get_main_menu_keyboard())
    except Exception:
        await callback.message.delete()
        await callback.message.answer(order_text, reply_markup=get_main_menu_keyboard())


async def send_invoice(callback, cart_items):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
    from aiogram.types import LabeledPrice

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    description = "–ó–∞–∫–∞–∑ –≤ Pizza Bot:\n"
    for item in cart_items:
        description += f"‚Ä¢ {item['product_name']} x{item['quantity']}\n"

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã
    prices = []
    for item in cart_items:
        prices.append(
            LabeledPrice(
                label=f"{item['product_name']} x{item['quantity']}",
                amount=int(item['total'] * 100)  # –°—É–º–º–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö
            )
        )

    total_amount = int(sum(item['total'] for item in cart_items) * 100)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–≤–æ–π—Å
    await callback.message.answer_invoice(
        title="–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ Pizza Bot",
        description=description,
        payload=f"order_{callback.from_user.id}",
        provider_token=PAYMENT_TOKEN,
        currency="RUB",
        prices=prices,
        start_parameter="pizza-bot-payment",
        photo_url="https://via.placeholder.com/400x300.png?text=Pizza+Bot",
        photo_width=400,
        photo_height=300,
        need_name=True,
        need_phone_number=True,
        need_email=False,
        need_shipping_address=True,
        is_flexible=False
    )


@router.pre_checkout_query()
async def pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    await pre_checkout_query.answer(ok=True)


@router.message(F.successful_payment)
async def successful_payment(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã"""
    import logging
    logger = logging.getLogger(__name__)

    payment_info = message.successful_payment
    logger.info(f"–£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞: user_id={message.from_user.id}, "
                f"amount={payment_info.total_amount/100} {payment_info.currency}")

    session = get_db_session()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        cart_items = data.get('cart_items', [])

        if not cart_items:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞: –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞",
                reply_markup=get_main_menu_keyboard()
            )
            return

        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        order_service = OrderService(session)

        order_data = {
            'user_id': message.from_user.id,
            'status': 'paid',
            'phone': payment_info.order_info.phone_number if payment_info.order_info else None,
            'address': None
        }

        items = [
            {
                'product_id': item['product_id'],
                'quantity': item['quantity'],
                'price': item['product_price']
            }
            for item in cart_items
        ]

        order = order_service.create_order(order_data, items)

        # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        cart_service = CartService(session)
        cart_service.clear_cart(message.from_user.id)

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        total_price = sum(item['total'] for item in cart_items)
        order_text = f"‚úÖ <b>–û–ü–õ–ê–¢–ê –£–°–ü–ï–®–ù–ê!</b>\n"
        order_text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        order_text += f"üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n\n"
        order_text += f"üì¶ <b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #{order.id}</b>\n"
        order_text += f"üí≥ <b>–û–ø–ª–∞—á–µ–Ω–æ: {total_price:.0f} —Ä—É–±.</b>\n\n"
        order_text += "<b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>\n"

        for item in cart_items:
            order_text += f"‚Ä¢ {item['product_name']}\n"
            order_text += f"  {item['quantity']} —à—Ç. √ó {item['product_price']:.0f} = "
            order_text += f"<b>{item['total']:.0f} —Ä—É–±.</b>\n\n"

        order_text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
        order_text += "üöö <b>–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É!</b>\n\n"
        order_text += "üìû –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è\n"
        order_text += "–¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç\n\n"
        order_text += "‚è∞ –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: 30-45 –º–∏–Ω—É—Ç\n\n"
        order_text += "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞! üçï"

        await message.answer(order_text, reply_markup=get_main_menu_keyboard())

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–ø–ª–∞—Ç—ã: {e}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.",
            reply_markup=get_main_menu_keyboard()
        )
    finally:
        session.close()


async def show_product_send(message, product, index, products, user_id):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–æ–≤–∞—Ä–æ–º"""
    caption = f"<b>{product.name}</b>\n\n"

    if product.description:
        caption += f"{product.description}\n\n"

    if product.category:
        caption += f"üìç –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product.category}\n"

    caption += f"üí∞ –¶–µ–Ω–∞: <b>{product.price:.0f} —Ä—É–±.</b>"

    keyboard = get_catalog_keyboard(products, index, user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ
    if product.image:
        try:
            # –ï—Å–ª–∏ —ç—Ç–æ file_id –æ—Ç Telegram, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é
            if product.image.startswith('AgAC') or product.image.startswith('BAA'):
                await message.answer_photo(
                    photo=product.image,
                    caption=caption,
                    reply_markup=keyboard
                )
            # –ï—Å–ª–∏ —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
            elif os.path.exists(product.image):
                photo = FSInputFile(product.image)
                await message.answer_photo(
                    photo=photo,
                    caption=caption,
                    reply_markup=keyboard
                )
            else:
                raise FileNotFoundError("Image not found")
        except Exception:
            text = f"üñº <i>–§–æ—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ</i>\n\n{caption}"
            await message.answer(text, reply_markup=keyboard)
    else:
        text = f"üñº <i>–§–æ—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</i>\n\n{caption}"
        await message.answer(text, reply_markup=keyboard)


async def show_product_edit(message, product, index, products, user_id):
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä–∞ —Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    caption = f"<b>{product.name}</b>\n\n"

    if product.description:
        caption += f"{product.description}\n\n"

    if product.category:
        caption += f"üìç –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product.category}\n"

    caption += f"üí∞ –¶–µ–Ω–∞: <b>{product.price:.0f} —Ä—É–±.</b>"

    keyboard = get_catalog_keyboard(products, index, user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ
    if product.image:
        try:
            # –ï—Å–ª–∏ —ç—Ç–æ file_id –æ—Ç Telegram, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é
            if product.image.startswith('AgAC') or product.image.startswith('BAA'):
                media = InputMediaPhoto(media=product.image, caption=caption, parse_mode="HTML")
            # –ï—Å–ª–∏ —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
            elif os.path.exists(product.image):
                photo = FSInputFile(product.image)
                media = InputMediaPhoto(media=photo, caption=caption, parse_mode="HTML")
            else:
                raise FileNotFoundError("Image not found")

            await message.edit_media(media=media, reply_markup=keyboard)
        except Exception:
            text = f"üñº <i>–§–æ—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ</i>\n\n{caption}"
            await message.edit_text(text, reply_markup=keyboard)
    else:
        text = f"üñº <i>–§–æ—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</i>\n\n{caption}"
        await message.edit_text(text, reply_markup=keyboard)


def get_catalog_keyboard_with_qty(products, current_index, user_id, quantity):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º"""
    from aiogram.utils.keyboard import InlineKeyboardBuilder

    builder = InlineKeyboardBuilder()
    product = products[current_index]

    # –ö–Ω–æ–ø–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
    builder.row(
        types.InlineKeyboardButton(text="‚ûñ", callback_data=f"qty_minus:{product.id}"),
        types.InlineKeyboardButton(text=f"{quantity} —à—Ç", callback_data="qty_display"),
        types.InlineKeyboardButton(text="‚ûï", callback_data=f"qty_plus:{product.id}")
    )

    # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
    builder.row(
        types.InlineKeyboardButton(
            text="üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É",
            callback_data=f"add_to_cart:{product.id}:{quantity}"
        )
    )

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    nav_buttons = []
    if current_index > 0:
        nav_buttons.append(
            types.InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                callback_data=f"catalog_page:{current_index - 1}"
            )
        )

    nav_buttons.append(
        types.InlineKeyboardButton(
            text=f"{current_index + 1}/{len(products)}",
            callback_data="page_info"
        )
    )

    if current_index < len(products) - 1:
        nav_buttons.append(
            types.InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
                callback_data=f"catalog_page:{current_index + 1}"
            )
        )

    builder.row(*nav_buttons)

    # –ö–æ—Ä–∑–∏–Ω–∞ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    builder.row(
        types.InlineKeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="show_cart"),
        types.InlineKeyboardButton(text="üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    )

    return builder.as_markup()