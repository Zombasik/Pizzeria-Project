"""
–û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""
import re
from datetime import datetime
from aiogram import Router, F, types
from aiogram.filters import CommandStart, Command

from src.config import ADMIN_IDS, RESTRICTED_WORDS
from src.keyboards.reply import star_kb
from src.services import UserService
from src.bot.dependencies import get_db_session

router = Router()


@router.message(CommandStart())
async def start_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    session = get_db_session()
    try:
        user_service = UserService(session)
        user_data = {
            'user_id': user_id,
            'username': message.from_user.username,
            'first_name': message.from_user.first_name,
            'last_name': message.from_user.last_name
        }
        user_service.get_or_create_user(user_data)
    finally:
        session.close()

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    admin_info = ""
    if user_id in ADMIN_IDS:
        admin_info = (
            "\n\nüîë –í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! "
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
        )

    await message.answer(
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Pizza Bot!\n"
        f"–í–∞—à Telegram ID: <code>{user_id}</code>{admin_info}",
        reply_markup=star_kb
    )


@router.message(Command("menu"))
@router.message(F.text.lower() == "üçï –º–µ–Ω—é")
async def menu_command(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–∏—Ü—Ü–µ—Ä–∏–∏"""
    await message.answer(
        "üçï <b>–ú–µ–Ω—é –Ω–∞—à–µ–π –ø–∏—Ü—Ü–µ—Ä–∏–∏</b>\n\n"
        "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞—à–∏—Ö –≤–∫—É—Å–Ω—ã—Ö –ø–∏—Ü—Ü!",
        reply_markup=star_kb
    )


@router.message(F.text.lower() == "–≤—Ä–µ–º—è")
async def time_command(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è"""
    current_time = datetime.now().strftime("%H:%M:%S")
    await message.reply(f"–°–µ–π—á–∞—Å {current_time}")


@router.message(F.text)
async def text_filter(message: types.Message):
    """–§–∏–ª—å—Ç—Ä –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
    words = re.findall(r'\b\w+\b', message.text.lower())
    if RESTRICTED_WORDS.intersection(words):
        await message.delete()
        await message.answer(
            f"{message.from_user.first_name}, "
            f"–≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ —Å–ª–æ–≤–∞!"
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if message.text.lower() in ["–ø—Ä–∏–≤–µ—Ç", "hello", "hi"]:
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã")
    elif message.text.lower() in ["—Å–ø–∞—Å–∏–±–æ", "–±–ª–∞–≥–æ–¥–∞—Ä—é"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! üòä")
    else:
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await message.answer(
            "ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
            reply_markup=star_kb
        )