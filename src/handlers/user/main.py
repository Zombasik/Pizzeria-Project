"""
–û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""
import re
import os
from aiogram import Router, F, types
from aiogram.filters import CommandStart, Command
from aiogram.types import InputMediaPhoto, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from src.config import ADMIN_IDS, RESTRICTED_WORDS
from src.keyboards.inline import (
    get_catalog_keyboard, get_cart_keyboard,
    get_main_menu_keyboard, get_confirm_order_keyboard
)
from src.services import UserService, ProductService, CartService
from src.bot.dependencies import get_db_session

router = Router()


class CatalogState(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º"""
    browsing = State()
    quantity_selection = State()


@router.message(CommandStart())
async def start_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    session = get_db_session()
    try:
        user_service = UserService(session)
        user_data = {
            'user_id': user_id,
            'username': message.from_user.username,
            'first_name': message.from_user.first_name,
            'last_name': message.from_user.last_name
        }
        user_service.get_or_create_user(user_data)
    finally:
        session.close()

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    admin_info = ""
    if user_id in ADMIN_IDS:
        admin_info = (
            "\n\nüîë <b>–†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
        )

    welcome_text = (
        f"üçï <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ü–∏—Ü—Ü–µ—Ä–∏—é!</b>\n\n"
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n\n"
        f"–ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ!\n"
        f"–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n\n"
        f"üî∏ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é –∏ –≤—ã–±—Ä–∞—Ç—å –ª—é–±–∏–º—É—é –ø–∏—Ü—Ü—É\n"
        f"üî∏ –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É\n"
        f"üî∏ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π\n"
        f"üî∏ –û–ø–ª–∞—Ç–∏—Ç—å –æ–Ω–ª–∞–π–Ω (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)\n\n"
        f"üì± –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ\n"
        f"–¥–æ—Å—Ç—É–ø–Ω—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é{admin_info}"
    )

    await message.answer(welcome_text, reply_markup=get_main_menu_keyboard())


@router.message(Command("menu"))
async def menu_command(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏"""
    session = get_db_session()
    try:
        product_service = ProductService(session)
        products = product_service.get_all_products(available_only=True)

        if not products:
            await message.answer(
                "üçï <b>–ú–ï–ù–Æ –ü–ò–¶–¶–ï–†–ò–ò</b>\n"
                "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
                "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–æ–≤–∞—Ä—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.\n\n"
                "–ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –º–µ–Ω—é!\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–π—Ç–∏ —á—É—Ç—å –ø–æ–∑–∂–µ.",
                reply_markup=get_main_menu_keyboard()
            )
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(products=products, current_index=0, quantity=1)
        await state.set_state(CatalogState.browsing)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä
        await show_product(message, products[0], 0, products, message.from_user.id)

    finally:
        session.close()


async def show_product(
    message: types.Message,
    product,
    index: int,
    products: list,
    user_id: int,
    edit: bool = False
):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä —Å —Ñ–æ—Ç–æ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º"""
    caption = f"<b>{product.name}</b>\n\n"

    if product.description:
        caption += f"{product.description}\n\n"

    if product.category:
        caption += f"üìç –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product.category}\n"

    caption += f"üí∞ –¶–µ–Ω–∞: <b>{product.price:.0f} —Ä—É–±.</b>"

    keyboard = get_catalog_keyboard(products, index, user_id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ
    if product.image:
        try:
            # –ï—Å–ª–∏ —ç—Ç–æ file_id –æ—Ç Telegram, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é
            if product.image.startswith('AgAC') or product.image.startswith('BAA'):
                if edit:
                    media = InputMediaPhoto(media=product.image, caption=caption, parse_mode="HTML")
                    await message.edit_media(media=media, reply_markup=keyboard)
                else:
                    await message.answer_photo(
                        photo=product.image,
                        caption=caption,
                        reply_markup=keyboard
                    )
            # –ï—Å–ª–∏ —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
            elif os.path.exists(product.image):
                photo = FSInputFile(product.image)
                if edit:
                    media = InputMediaPhoto(media=photo, caption=caption, parse_mode="HTML")
                    await message.edit_media(media=media, reply_markup=keyboard)
                else:
                    await message.answer_photo(
                        photo=photo,
                        caption=caption,
                        reply_markup=keyboard
                    )
            else:
                raise FileNotFoundError("Image not found")
        except Exception as e:
            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            text = f"üñº <i>–§–æ—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ</i>\n\n{caption}"
            if edit:
                await message.edit_text(text, reply_markup=keyboard)
            else:
                await message.answer(text, reply_markup=keyboard)
    else:
        # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = f"üñº <i>–§–æ—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</i>\n\n{caption}"
        if edit:
            await message.edit_text(text, reply_markup=keyboard)
        else:
            await message.answer(text, reply_markup=keyboard)


@router.message(F.text)
async def text_filter(message: types.Message):
    """–§–∏–ª—å—Ç—Ä –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
    words = re.findall(r'\b\w+\b', message.text.lower())
    if RESTRICTED_WORDS.intersection(words):
        await message.delete()
        await message.answer(
            f"{message.from_user.first_name}, "
            f"–≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ —Å–ª–æ–≤–∞!"
        )
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if message.text.lower() in ["–ø—Ä–∏–≤–µ—Ç", "hello", "hi"]:
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã",
            reply_markup=get_main_menu_keyboard()
        )
    elif message.text.lower() in ["—Å–ø–∞—Å–∏–±–æ", "–±–ª–∞–≥–æ–¥–∞—Ä—é"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! üòä", reply_markup=get_main_menu_keyboard())
    else:
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await message.answer(
            "ü§î –ù–µ –ø–æ–Ω–∏–º–∞—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
        )