import asyncio
import re
import secrets
from datetime import datetime, timedelta
from aiogram import F, Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command, or_f, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from sqlalchemy import create_engine, func
from sqlalchemy.orm import sessionmaker

from kbds import reply, admin_kb
from database.models import Base, TelegramUser, AdminToken, Product, Order, OrderItem, Cart
from config import BOT_TOKEN, ADMIN_IDS, DATABASE_URL, ADMIN_URL, TOKEN_LIFETIME_HOURS, RESTRICTED_WORDS

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
engine = create_engine(DATABASE_URL)
Base.metadata.create_all(engine)
Session = sessionmaker(bind=engine)



bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
class ProductStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_description = State()
    waiting_for_price = State()
    waiting_for_category = State()
    waiting_for_image = State()
    waiting_for_edit_field = State()
    waiting_for_edit_value = State()

class OrderStates(StatesGroup):
    waiting_for_status_change = State()

class UserStates(StatesGroup):
    waiting_for_user_action = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–π
storage = MemoryStorage()
dp = Dispatcher(storage=storage)


@dp.message(Command('start'))
async def start_cmd(message: types.Message):
    user_id = message.from_user.id

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–æ–≤
    admin_info = ""
    if user_id in ADMIN_IDS:
        admin_info = "\n\nüîë –í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."

    await message.answer(
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Pizza Bot!\n"
        f"–í–∞—à Telegram ID: <code>{user_id}</code>{admin_info}",
        reply_markup=reply.star_kb,
        parse_mode=ParseMode.HTML
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏
@dp.callback_query(F.data == "admin_back")
async def admin_main_menu_handler(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    await callback.message.edit_text(
        "üîß <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=admin_kb.admin_main_menu
    )

# === –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–û–í–ê–†–ê–ú–ò ===

@dp.callback_query(F.data == "admin_products")
async def products_menu_handler(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    await callback.message.edit_text(
        "üì¶ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=admin_kb.products_menu
    )

@dp.callback_query(F.data == "product_list")
async def product_list_handler(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    session = Session()
    try:
        products = session.query(Product).all()

        if not products:
            await callback.message.edit_text(
                "üì¶ –¢–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.\n"
                "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä!",
                reply_markup=admin_kb.products_menu
            )
            return

        text = "üì¶ <b>–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:</b>\n\n"

        for product in products:
            status = "‚úÖ" if product.available else "‚ùå"
            text += f"{status} <b>{product.name}</b>\n"
            text += f"   üí∞ {product.price} —Ä—É–±.\n"
            text += f"   üìÇ {product.category or '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}\n"
            text += f"   /product_{product.id}\n\n"

        await callback.message.edit_text(
            text,
            reply_markup=admin_kb.products_menu
        )
    finally:
        session.close()

@dp.callback_query(F.data == "product_add")
async def product_add_handler(callback: types.CallbackQuery, state: FSMContext):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    await state.set_state(ProductStates.waiting_for_name)
    await callback.message.edit_text(
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞</b>\n\n"
        "–®–∞–≥ 1/5: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=admin_kb.cancel_kb
    )

@dp.message(ProductStates.waiting_for_name)
async def product_name_handler(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(ProductStates.waiting_for_description)

    await message.answer(
        "–®–∞–≥ 2/5: –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=admin_kb.cancel_kb
    )

@dp.message(ProductStates.waiting_for_description)
async def product_description_handler(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await state.set_state(ProductStates.waiting_for_price)

    await message.answer(
        "–®–∞–≥ 3/5: –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):",
        reply_markup=admin_kb.cancel_kb
    )

@dp.message(ProductStates.waiting_for_price)
async def product_price_handler(message: types.Message, state: FSMContext):
    try:
        price = float(message.text)
        await state.update_data(price=price)
        await state.set_state(ProductStates.waiting_for_category)

        await message.answer(
            "–®–∞–≥ 4/5: –í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ü–∏—Ü—Ü–∞, –ù–∞–ø–∏—Ç–∫–∏, –î–µ—Å–µ—Ä—Ç—ã):",
            reply_markup=admin_kb.cancel_kb
        )
    except ValueError:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ!")

@dp.message(ProductStates.waiting_for_category)
async def product_category_handler(message: types.Message, state: FSMContext):
    await state.update_data(category=message.text)
    await state.set_state(ProductStates.waiting_for_image)

    await message.answer(
        "–®–∞–≥ 5/5: –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
        reply_markup=admin_kb.cancel_kb
    )

@dp.message(ProductStates.waiting_for_image)
async def product_image_handler(message: types.Message, state: FSMContext):
    data = await state.get_data()

    image_path = None
    if message.photo:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ñ–æ—Ç–æ
        image_path = message.photo[-1].file_id
    elif message.text.lower() != '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–≤–∞—Ä –≤ –ë–î
    session = Session()
    try:
        product = Product(
            name=data['name'],
            description=data['description'],
            price=data['price'],
            category=data['category'],
            image=image_path,
            available=True
        )
        session.add(product)
        session.commit()

        await message.answer(
            f"‚úÖ –¢–æ–≤–∞—Ä '<b>{data['name']}</b>' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"üí∞ –¶–µ–Ω–∞: {data['price']} —Ä—É–±.\n"
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}",
            reply_markup=admin_kb.products_menu
        )
    except Exception as e:
        session.rollback()
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {str(e)}")
    finally:
        session.close()
        await state.clear()

@dp.message(or_f(Command("menu"), (F.text.lower() == "–º–µ–Ω—é")))
async def menu_cmd(message: types.Message):
    await message.answer("–≠—Ç–æ –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é")
  #  await message.reply(message.text) 


restricted_words = RESTRICTED_WORDS

@dp.message(F.text.lower() == "–≤—Ä–µ–º—è")
async def echo_cmd(message: types.Message):
    await message.reply("–°–µ–π—á–∞—Å " + datetime.now().strftime("%H:%M:%S"))


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

# –ö–æ–º–∞–Ω–¥–∞ /admin - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏ –≤ Telegram
@dp.message(Command('admin'))
async def admin_cmd(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return

    await message.answer(
        "üîß <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=admin_kb.admin_main_menu
    )


@dp.message(Command('setadmin'))
async def set_admin_cmd(message: types.Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–ª–∞–≤–Ω—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (–ø–µ—Ä–≤—ã–π –≤ —Å–ø–∏—Å–∫–µ)
    if user_id != ADMIN_IDS[0]:
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –¥—Ä—É–≥–∏—Ö –∞–¥–º–∏–Ω–æ–≤!")
        return

    # –ü–æ–ª—É—á–∞–µ–º ID –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        parts = message.text.split()
        if len(parts) != 2:
            await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setadmin <user_id>")
            return

        new_admin_id = int(parts[1])

        if new_admin_id not in ADMIN_IDS:
            ADMIN_IDS.append(new_admin_id)
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_admin_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã")
        else:
            await message.answer("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")


# === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê–ú–ò ===

@dp.callback_query(F.data == "admin_orders")
async def orders_menu_handler(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    await callback.message.edit_text(
        "üìã <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=admin_kb.orders_menu
    )

@dp.callback_query(F.data.startswith("orders_"))
async def orders_list_handler(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    status = callback.data.split("_")[1]

    status_map = {
        "new": "pending",
        "processing": "processing",
        "completed": "completed",
        "cancelled": "cancelled"
    }

    status_text = {
        "new": "üÜï –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã",
        "processing": "üîÑ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ",
        "completed": "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ",
        "cancelled": "‚ùå –û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ"
    }

    session = Session()
    try:
        orders = session.query(Order).filter_by(status=status_map.get(status, "pending")).all()

        if not orders:
            await callback.message.edit_text(
                f"{status_text[status]}\n\n"
                "–ó–∞–∫–∞–∑–æ–≤ —Å —Ç–∞–∫–∏–º —Å—Ç–∞—Ç—É—Å–æ–º –Ω–µ—Ç.",
                reply_markup=admin_kb.orders_menu
            )
            return

        text = f"{status_text[status]}:\n\n"

        for order in orders[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
            text += f"üÜî –ó–∞–∫–∞–∑ #{order.id}\n"
            text += f"üë§ {order.username or '–ë–µ–∑ –∏–º–µ–Ω–∏'}\n"
            text += f"üì± {order.phone or '–ù–µ—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞'}\n"
            text += f"üí∞ {order.total_price} —Ä—É–±.\n"
            text += f"üïê {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            text += f"/order_{order.id}\n\n"

        await callback.message.edit_text(
            text,
            reply_markup=admin_kb.orders_menu
        )
    finally:
        session.close()

# === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ===

@dp.callback_query(F.data == "admin_users")
async def users_menu_handler(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    await callback.message.edit_text(
        "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=admin_kb.users_menu
    )

@dp.callback_query(F.data == "users_all")
async def users_all_handler(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    session = Session()
    try:
        users = session.query(TelegramUser).limit(10).all()

        if not users:
            await callback.message.edit_text(
                "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç.",
                reply_markup=admin_kb.users_menu
            )
            return

        text = "üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"

        for user in users:
            status = "üö´" if user.is_banned else "‚úÖ"
            admin = "üëÆ" if user.is_admin else ""
            text += f"{status} {admin} {user.first_name or '–ë–µ–∑ –∏–º–µ–Ω–∏'}\n"
            text += f"   @{user.username or '–Ω–µ—Ç username'}\n"
            text += f"   ID: {user.user_id}\n"
            text += f"   /user_{user.user_id}\n\n"

        await callback.message.edit_text(
            text,
            reply_markup=admin_kb.users_menu
        )
    finally:
        session.close()

# === –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===

@dp.callback_query(F.data == "admin_stats")
async def stats_handler(callback: types.CallbackQuery):
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    session = Session()
    try:
        # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        total_users = session.query(func.count(TelegramUser.id)).scalar()
        total_products = session.query(func.count(Product.id)).scalar()
        total_orders = session.query(func.count(Order.id)).scalar()

        # –ü–æ–¥—Å—á–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        pending_orders = session.query(func.count(Order.id)).filter_by(status='pending').scalar()
        completed_orders = session.query(func.count(Order.id)).filter_by(status='completed').scalar()

        # –û–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂
        total_sales = session.query(func.sum(Order.total_price)).filter_by(status='completed').scalar() or 0

        text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"üì¶ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {total_products}\n"
            f"üìã –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}\n\n"
            f"üÜï –ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {pending_orders}\n"
            f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {completed_orders}\n\n"
            f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞ –ø—Ä–æ–¥–∞–∂: {total_sales:.2f} —Ä—É–±."
        )

        await callback.message.edit_text(
            text,
            reply_markup=admin_kb.admin_main_menu
        )
    finally:
        session.close()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –¥–µ–π—Å—Ç–≤–∏—è
@dp.callback_query(F.data == "cancel")
async def cancel_handler(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=admin_kb.admin_main_menu
    )

# –ó–∞–∫—Ä—ã—Ç–∏–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@dp.callback_query(F.data == "admin_close")
async def close_admin_handler(callback: types.CallbackQuery):
    await callback.message.delete()
    await callback.answer("–ü–∞–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∞")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
@dp.message(F.text.regexp(r'^/product_(\d+)$'))
async def product_detail_handler(message: types.Message):
    if not is_admin(message.from_user.id):
        return

    product_id = int(message.text.split('_')[1])

    session = Session()
    try:
        product = session.query(Product).filter_by(id=product_id).first()

        if not product:
            await message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        status = "‚úÖ –í –Ω–∞–ª–∏—á–∏–∏" if product.available else "‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏"

        text = (
            f"üì¶ <b>{product.name}</b>\n\n"
            f"üìù {product.description}\n"
            f"üí∞ –¶–µ–Ω–∞: {product.price} —Ä—É–±.\n"
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product.category or '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏'}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {status}"
        )

        if product.image:
            await message.answer_photo(
                photo=product.image,
                caption=text,
                reply_markup=admin_kb.create_product_keyboard(product_id)
            )
        else:
            await message.answer(
                text,
                reply_markup=admin_kb.create_product_keyboard(product_id)
            )
    finally:
        session.close()

@dp.message(F.text.regexp(r'^/order_(\d+)$'))
async def order_detail_handler(message: types.Message):
    if not is_admin(message.from_user.id):
        return

    order_id = int(message.text.split('_')[1])

    session = Session()
    try:
        order = session.query(Order).filter_by(id=order_id).first()

        if not order:
            await message.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
        items = session.query(OrderItem).filter_by(order_id=order_id).all()

        text = (
            f"üìã <b>–ó–∞–∫–∞–∑ #{order.id}</b>\n\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {order.username or '–ë–µ–∑ –∏–º–µ–Ω–∏'}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {order.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üìç –ê–¥—Ä–µ—Å: {order.address or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üïê –í—Ä–µ–º—è: {order.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {order.status}\n\n"
            f"<b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>\n"
        )

        for item in items:
            product = session.query(Product).filter_by(id=item.product_id).first()
            if product:
                text += f"‚Ä¢ {product.name} x{item.quantity} = {item.price * item.quantity} —Ä—É–±.\n"

        text += f"\nüí∞ <b>–ò—Ç–æ–≥–æ: {order.total_price} —Ä—É–±.</b>"

        await message.answer(
            text,
            reply_markup=admin_kb.create_order_keyboard(order_id)
        )
    finally:
        session.close()

@dp.message(F.text.regexp(r'^/user_(\d+)$'))
async def user_detail_handler(message: types.Message):
    if not is_admin(message.from_user.id):
        return

    user_id = int(message.text.split('_')[1])

    session = Session()
    try:
        user = session.query(TelegramUser).filter_by(user_id=user_id).first()

        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü–æ–¥—Å—á–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        orders_count = session.query(func.count(Order.id)).filter_by(user_id=user_id).scalar()

        status = "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if user.is_banned else "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω"
        admin = "üëÆ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if user.is_admin else "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

        text = (
            f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n\n"
            f"üÜî ID: {user.user_id}\n"
            f"üìù –ò–º—è: {user.first_name} {user.last_name or ''}\n"
            f"üí¨ Username: @{user.username or '–Ω–µ—Ç'}\n"
            f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {status}\n"
            f"üîê –†–æ–ª—å: {admin}\n"
            f"üìã –ó–∞–∫–∞–∑–æ–≤: {orders_count}\n"
            f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at.strftime('%d.%m.%Y')}"
        )

        await message.answer(
            text,
            reply_markup=admin_kb.create_user_keyboard(user_id)
        )
    finally:
        session.close()

@dp.message(F.text)
async def cleaner(message: types.Message):
    # –£–¥–∞–ª—è–µ–º –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–ª–æ–≤–∞
    words = re.findall(r'\b\w+\b', message.text.lower())
    if restricted_words.intersection(words):
        await message.delete()
        await message.answer(f"{message.from_user.first_name}, –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ —Å–ª–æ–≤–∞!")


async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.set_my_commands(commands=[types.BotCommand(command='start', description='–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã'), types.BotCommand(command='menu', description='–ú–µ–Ω—é')], scope=types.BotCommandScopeDefault())
    await dp.start_polling(bot)
asyncio.run(main())

